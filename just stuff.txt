// Generated from Query.g4 by ANTLR 4.7
package ca.ece.ubc.cpen221.mp5;

import java.util.HashSet;
import java.util.Set;

import org.antlr.v4.runtime.ParserRuleContext;
import org.antlr.v4.runtime.tree.AbstractParseTreeVisitor;

import ca.ece.ubc.cpen221.mp5.QueryParser.CategoryContext;
import ca.ece.ubc.cpen221.mp5.QueryParser.InContext;
import ca.ece.ubc.cpen221.mp5.QueryParser.NameContext;
import ca.ece.ubc.cpen221.mp5.QueryParser.PriceContext;
import ca.ece.ubc.cpen221.mp5.QueryParser.RatingContext;
import ca.ece.ubc.cpen221.mp5.datatypes.YelpRestaurant;

/**
 * This class provides an empty implementation of {@link QueryVisitor}, which
 * can be extended to create a visitor which only needs to handle a subset of
 * the available methods.
 *
 * @param <T>
 *            The return type of the visit operation. Use {@link Void} for
 *            operations with no return type.
 */
public class QueryBaseVisitor extends AbstractParseTreeVisitor<Set<YelpRestaurant>>
		implements QueryVisitor<Set<YelpRestaurant>> {

	private YelpDB yelpDB;

	public QueryBaseVisitor(YelpDB yelpDB) {
		this.yelpDB = yelpDB;
	}

	public Set<YelpRestaurant> visitChild(ParserRuleContext cxt) {
		// TODO
		return null;
	}

	@Override
	public Set<YelpRestaurant> visitChildren(ParserRuleContext cxt) {
		// TODO Auto-generated method stub
		return null;
	}
	// ParserRuleContext has a list<ParseTrees> children as part of spec

	/**
	 * {@inheritDoc}
	 *
	 * <p>
	 * The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.
	 * </p>
	 */
	@Override
	public Set<YelpRestaurant> visitQuery(QueryParser.QueryContext ctx) {
		return visitChildren(ctx);
	}

	/**
	 * Computes the union of all the andExpr children
	 */
	@Override
	public Set<YelpRestaurant> visitOrExpr(QueryParser.OrExprContext ctx) {
		Set<YelpRestaurant> retSet = new HashSet<YelpRestaurant>();
		for (int i = 0; i < ctx.getChildCount(); i += 2)
			retSet.addAll(visitAndExpr((QueryParser.AndExprContext) ctx.getChild(i)));

		return retSet;
	}

	/**
	 * Computes the intersection of all the atom children
	 */
	@Override
	public Set<YelpRestaurant> visitAndExpr(QueryParser.AndExprContext ctx) {
		Set<YelpRestaurant> retSet = yelpDB.getRestaurants();
		for (int i = 0; i < ctx.getChildCount(); i += 2)
			retSet.retainAll(visitAtom((QueryParser.AtomContext) ctx.getChild(i)));

		return retSet;
	}

	/**
	 * {@inheritDoc}
	 *
	 * <p>
	 * The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.
	 * </p>
	 */
	@Override
	public Set<YelpRestaurant> visitAtom(QueryParser.AtomContext ctx) {
		if (ctx.getChildCount() == 1)
			return visitChildren(ctx);
		else
			return visitOrExpr((QueryParser.OrExprContext) ctx.getChild(1));
	}

	@Override
	public Set<YelpRestaurant> visitIn(InContext ctx) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Set<YelpRestaurant> visitCategory(CategoryContext ctx) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Set<YelpRestaurant> visitName(NameContext ctx) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Set<YelpRestaurant> visitRating(RatingContext ctx) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Set<YelpRestaurant> visitPrice(PriceContext ctx) {
		// TODO Auto-generated method stub
		return null;
	}
}